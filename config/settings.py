"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, random, string
from pathlib import Path
from dotenv import load_dotenv
from str2bool import str2bool

load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'Super_Secr3t_9999')

# Enable/Disable DEBUG Mode
DEBUG = str2bool(os.environ.get('DEBUG'))
#print(' DEBUG -> ' + str(DEBUG) ) 

# Docker HOST
ALLOWED_HOSTS = ['*']

# Add here your deployment HOSTS
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://localhost:5085', 'http://127.0.0.1:8000', 'http://127.0.0.1:5085']

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:    
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'admin_black.apps.AdminBlackConfig',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.sites',

    # Serve UI pages
    "apps.pages",

    # Dynamic DT
    "apps.dyn_dt",

    # Dynamic API
    "apps.dyn_api",

    # Charts
    "apps.charts",

    # Auth / API
    'rest_framework',            # Include DRF
    'rest_framework.authtoken',  # Include DRF Auth  
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth',
    'dj_rest_auth.registration',

    # My Apps
     # ...otras apps...
    'apps.accounts',
    'apps.carriers',
    'apps.brokers',
    'apps.drivers',
    'apps.trucks',
    'apps.loads',
    'apps.dispatch',
    'apps.documents',
    'apps.payments',
    'apps.notifications',
    'apps.core',
    'apps.my_profile',
    'apps.education',
    'apps.billing',
    'apps.analytics',
    'apps.comms',
]


AUTH_USER_MODEL = 'accounts.User' # Custom user model
SITE_ID = 1

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # allauth requires its AccountMiddleware after AuthenticationMiddleware
    'allauth.account.middleware.AccountMiddleware',
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

HOME_TEMPLATES = os.path.join(BASE_DIR, 'templates')

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [HOME_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "config.context_processors.feature_flags",
                "config.context_processors.retell_settings",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DB_ENGINE   = os.getenv('DB_ENGINE'   , None)
DB_USERNAME = os.getenv('DB_USERNAME' , None)
DB_PASS     = os.getenv('DB_PASS'     , None)
DB_HOST     = os.getenv('DB_HOST'     , None)
DB_PORT     = os.getenv('DB_PORT'     , None)
DB_NAME     = os.getenv('DB_NAME'     , None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = { 
      'default': {
        'ENGINE'  : 'django.db.backends.' + DB_ENGINE, 
        'NAME'    : DB_NAME,
        'USER'    : DB_USERNAME,
        'PASSWORD': DB_PASS,
        'HOST'    : DB_HOST,
        'PORT'    : DB_PORT,
        }, 
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)



MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

#if not DEBUG:
#    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = '/'
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'no-reply@example.com')

# ### DYNAMIC_DATATB Settings ###
DYNAMIC_DATATB = {
    # SLUG -> Import_PATH 
    'product'  : "apps.pages.models.Product",
}
########################################

# Syntax: URI -> Import_PATH
DYNAMIC_API = {
    # SLUG -> Import_PATH 
    'product'  : "apps.pages.models.Product",
}

# DRF & JWT (mantener compatibilidad con lo existente)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}
REST_USE_JWT = True
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
}
########################################

# Allauth settings
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_RATE_LIMITS = {
    'login_failed': '5/5m',  # max 5 failed logins per 5 minutes
}
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_USER_MODEL_EMAIL_FIELD = "email"
ACCOUNT_ADAPTER = "apps.accounts.adapters.AccountAdapter"
# SOCIALACCOUNT_ADAPTER = "apps.accounts.adapters.SocialAccountAdapter"
ACCOUNT_FORMS = { 'signup': 'apps.accounts.forms.CustomSignupForm' }
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# Retell webhook settings
RETELL_WEBHOOK_SECRET = os.environ.get('RETELL_WEBHOOK_SECRET', 'changeme')
RETELL_ALLOWED_AGENT_IDS = os.environ.get('RETELL_ALLOWED_AGENT_IDS', '')

# Retell API settings
RETELL_API_KEY = os.getenv('RETELL_API_KEY', '')
RETELL_DEFAULT_AGENT_ID = os.getenv('RETELL_DEFAULT_AGENT_ID', '')
RETELL_CHAT_AGENT_ID = os.getenv('RETELL_CHAT_AGENT_ID', '')

# Stripe / Billing settings
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY', '')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET', '')
STRIPE_PORTAL_RETURN_URL = os.getenv('STRIPE_PORTAL_RETURN_URL', 'http://localhost:8000/')
# Optional: pass a specific Customer Portal configuration id (bpc_*)
STRIPE_PORTAL_CONFIGURATION_ID = os.getenv('STRIPE_PORTAL_CONFIGURATION_ID', '')

BILLING_REFUND_PRO_RATA = os.getenv('BILLING_REFUND_PRO_RATA', 'False').lower() in ('1','true','yes')
BILLING_DEFAULT_EXAM_COST_CREDITS = int(os.getenv('BILLING_DEFAULT_EXAM_COST_CREDITS', '1'))
BILLING_ALLOW_REFUND_IF_USED_THRESHOLD = int(os.getenv('BILLING_ALLOW_REFUND_IF_USED_THRESHOLD', '0'))
BILLING_CREDIT_CARRYOVER = os.getenv('BILLING_CREDIT_CARRYOVER', 'False').lower() in ('1','true','yes')

# Feature flags
STRIPE_UI_PREVIEW = os.getenv('STRIPE_UI_PREVIEW', 'False').lower() in ('1','true','yes')

# Education settings
EDU_PASS_THRESHOLD = float(os.getenv('EDU_PASS_THRESHOLD', '70'))
EDU_REVEAL_CORRECT_ANSWERS = os.getenv('EDU_REVEAL_CORRECT_ANSWERS', 'False').lower() in ('1','true','yes')
EDU_EXPIRE_MINUTES = int(os.getenv('EDU_EXPIRE_MINUTES', '120'))

